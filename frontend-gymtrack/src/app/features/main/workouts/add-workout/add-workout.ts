import { Component, output } from '@angular/core';
import { Workout } from '../../../../models/workout';
import { FormArray, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { AtLeastOneExerciseValidator } from '../../../../validators/atLeastOneExerciseValidator';
import { Exercise } from '../../../../models/exercise';

@Component({
  selector: 'app-add-workout',
  imports: [FormsModule, ReactiveFormsModule],
  templateUrl: './add-workout.html',
  styleUrl: './add-workout.scss',
})
export class AddWorkout {
  addWorkoutForm = new FormGroup({
    workoutType: new FormControl<'Push day' | 'Pull day' | 'Legs day' | ''>('', {
      validators: [Validators.required],
    }),
    workoutDate: new FormControl('', {
      validators: [Validators.required],
    }),
    exercises: new FormArray([], {
      validators: [AtLeastOneExerciseValidator.atLeastOne],
    })
  });
  save = output<Workout>();
  cancel = output<void>();
  workoutTypes = ['Push Day', 'Pull Day', 'Legs Day'];

  get exercises(): FormArray {
    return this.addWorkoutForm.get('exercises') as FormArray;
  }

  get isWorkoutTypeValid(): boolean {
    const workoutTypeControl = this.addWorkoutForm.controls.workoutType;
    return workoutTypeControl.touched && workoutTypeControl.invalid;
  }

  get isWorkoutDateValid(): boolean {
    const workoutDateControl = this.addWorkoutForm.controls.workoutDate;
    return workoutDateControl.touched && workoutDateControl.invalid;
  }

  get IsWorkoutExercisesValid(): boolean {
    const exercisesControl = this.addWorkoutForm.controls.exercises;
    return exercisesControl.touched && exercisesControl.invalid && exercisesControl.errors?.['atLeastOne'];
  }

  get isExercisesInvalid(): boolean {
    const exercisesArray = this.addWorkoutForm.get('exercises') as FormArray;
    return exercisesArray.touched && exercisesArray.controls.some(control => control.invalid);
  }

  addExercise() {
    const exerciseGroup = new FormGroup({
      name: new FormControl('', Validators.required),
      weight: new FormControl(0, [Validators.required, Validators.min(0)])
    });

    (this.addWorkoutForm.get('exercises') as FormArray).push(exerciseGroup);
  }

  removeExercise(idx: number) {
    (this.addWorkoutForm.get('exercises') as FormArray).removeAt(idx);
  }

  onSave() {
    if (this.addWorkoutForm.invalid) {
      this.addWorkoutForm.markAllAsTouched();
      console.log('Form is invalid, please correct the errors.');
      return;
    }

    const formValue = this.addWorkoutForm.value as {
      workoutType: Workout['type'];
      workoutDate: string;
      exercises: Exercise[];
    };

    const workout: Workout = {
      id: null, // Assuming the ID will be generated by the backend
      type: formValue.workoutType,
      date: formValue.workoutDate,
      exercises: formValue.exercises
    };

    this.save.emit(workout);
    this.reset();
  }

  onCancel() {
    this.cancel.emit();
    this.reset();
  }

  reset() {
  }
}
